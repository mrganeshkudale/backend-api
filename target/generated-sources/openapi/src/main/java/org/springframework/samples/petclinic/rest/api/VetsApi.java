/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.springframework.samples.petclinic.rest.api;

import org.springframework.samples.petclinic.rest.dto.RestErrorDto;
import org.springframework.samples.petclinic.rest.dto.VetDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-11T15:33:08.613541700+05:30[Asia/Calcutta]")
@Validated
@Api(value = "vets", description = "the vets API")
public interface VetsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /vets : Create a Vet
     * Creates a vet .
     *
     * @param vetDto The vet (required)
     * @return Vet created successfully. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Create a Vet", nickname = "addVet", notes = "Creates a vet .", response = VetDto.class, tags={ "vet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Vet created successfully.", response = VetDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Vet not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<VetDto> addVet(@ApiParam(value = "The vet" ,required=true )  @Valid @RequestBody VetDto vetDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /vets/{vetId} : Delete a vet by ID
     * Returns the vet or a 404 error.
     *
     * @param vetId The ID of the vet. (required)
     * @return Vet details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Delete a vet by ID", nickname = "deleteVet", notes = "Returns the vet or a 404 error.", response = VetDto.class, tags={ "vets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Vet details found and returned.", response = VetDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Vet not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/vets/{vetId}",
        produces = { "application/json" }
    )
    default ResponseEntity<VetDto> deleteVet(@Min(0)@ApiParam(value = "The ID of the vet.",required=true) @PathVariable("vetId") Integer vetId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vets/{vetId} : Get a vet by ID
     * Returns the vet or a 404 error.
     *
     * @param vetId The ID of the vet. (required)
     * @return Vet details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Get a vet by ID", nickname = "getVet", notes = "Returns the vet or a 404 error.", response = VetDto.class, tags={ "vet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Vet details found and returned.", response = VetDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Vet not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vets/{vetId}",
        produces = { "application/json" }
    )
    default ResponseEntity<VetDto> getVet(@Min(0)@ApiParam(value = "The ID of the vet.",required=true) @PathVariable("vetId") Integer vetId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vets : Lists vets
     * Returns an array of vets.
     *
     * @return Vets found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Lists vets", nickname = "listVets", notes = "Returns an array of vets.", response = VetDto.class, responseContainer = "List", tags={ "vet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Vets found and returned.", response = VetDto.class, responseContainer = "List"),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vets",
        produces = { "application/json" }
    )
    default ResponseEntity<List<VetDto>> listVets() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /vets/{vetId} : Update a vet  by ID
     * Returns the vet or a 404 error.
     *
     * @param vetId The ID of the vet. (required)
     * @param vetDto The vet (required)
     * @return Pet type details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Vet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Update a vet  by ID", nickname = "updateVet", notes = "Returns the vet or a 404 error.", response = VetDto.class, tags={ "vet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Pet type details found and returned.", response = VetDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Vet not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/vets/{vetId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<VetDto> updateVet(@Min(0)@ApiParam(value = "The ID of the vet.",required=true) @PathVariable("vetId") Integer vetId,@ApiParam(value = "The vet" ,required=true )  @Valid @RequestBody VetDto vetDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.springframework.samples.petclinic.rest.api;

import org.springframework.samples.petclinic.rest.dto.RestErrorDto;
import org.springframework.samples.petclinic.rest.dto.SpecialtyDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-11T15:33:08.613541700+05:30[Asia/Calcutta]")
@Validated
@Api(value = "specialties", description = "the specialties API")
public interface SpecialtiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /specialties : Create a specialty
     * Creates a specialty .
     *
     * @param specialtyDto The specialty (required)
     * @return Specialty created successfully. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Specialty not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Create a specialty", nickname = "addSpecialty", notes = "Creates a specialty .", response = SpecialtyDto.class, tags={ "specialty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Specialty created successfully.", response = SpecialtyDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Specialty not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/specialties",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SpecialtyDto> addSpecialty(@ApiParam(value = "The specialty" ,required=true )  @Valid @RequestBody SpecialtyDto specialtyDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"radiology\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /specialties/{specialtyId} : Delete a specialty by ID
     * Returns the specialty or a 404 error.
     *
     * @param specialtyId The ID of the specialty. (required)
     * @return Specialty details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Specialty not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Delete a specialty by ID", nickname = "deleteSpecialty", notes = "Returns the specialty or a 404 error.", response = SpecialtyDto.class, tags={ "specialty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Specialty details found and returned.", response = SpecialtyDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Specialty not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/specialties/{specialtyId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SpecialtyDto> deleteSpecialty(@Min(0)@ApiParam(value = "The ID of the specialty.",required=true) @PathVariable("specialtyId") Integer specialtyId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"radiology\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /specialties/{specialtyId} : Get a specialty by ID
     * Returns the specialty or a 404 error.
     *
     * @param specialtyId The ID of the pet. (required)
     * @return Specialty details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Specialty not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Get a specialty by ID", nickname = "getSpecialty", notes = "Returns the specialty or a 404 error.", response = SpecialtyDto.class, tags={ "specialty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Specialty details found and returned.", response = SpecialtyDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Specialty not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/specialties/{specialtyId}",
        produces = { "application/json" }
    )
    default ResponseEntity<SpecialtyDto> getSpecialty(@Min(0)@ApiParam(value = "The ID of the pet.",required=true) @PathVariable("specialtyId") Integer specialtyId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"radiology\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /specialties : Lists specialties
     * Returns an array of specialty .
     *
     * @return Specialties found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Lists specialties", nickname = "listSpecialties", notes = "Returns an array of specialty .", response = SpecialtyDto.class, responseContainer = "List", tags={ "specialty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Specialties found and returned.", response = SpecialtyDto.class, responseContainer = "List"),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/specialties",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SpecialtyDto>> listSpecialties() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"radiology\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /specialties/{specialtyId} : Update a specialty by ID
     * Returns the specialty or a 404 error.
     *
     * @param specialtyId The ID of the specialty. (required)
     * @param specialtyDto The pet (required)
     * @return Specialty details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Specialty not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @ApiOperation(value = "Update a specialty by ID", nickname = "updateSpecialty", notes = "Returns the specialty or a 404 error.", response = SpecialtyDto.class, tags={ "specialty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Specialty details found and returned.", response = SpecialtyDto.class),
        @ApiResponse(code = 304, message = "Not modified."),
        @ApiResponse(code = 400, message = "Bad request.", response = RestErrorDto.class),
        @ApiResponse(code = 404, message = "Specialty not found.", response = RestErrorDto.class),
        @ApiResponse(code = 500, message = "Server error.", response = RestErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/specialties/{specialtyId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SpecialtyDto> updateSpecialty(@Min(0)@ApiParam(value = "The ID of the specialty.",required=true) @PathVariable("specialtyId") Integer specialtyId,@ApiParam(value = "The pet" ,required=true )  @Valid @RequestBody SpecialtyDto specialtyDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"radiology\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
